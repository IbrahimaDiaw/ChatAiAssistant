// <auto-generated />
using System;
using ChatAI_Assistant.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatAI_Assistant.Server.Migrations
{
    [DbContext(typeof(ChatAiAssistantDbContext))]
    partial class ChatAiAssistantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AIContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIModel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AIProvider")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("AITemperature")
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEdited")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFromAI")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MessageHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("TokensUsed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("User");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageHash")
                        .HasDatabaseName("IX_ChatMessages_MessageHash");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("IX_ChatMessages_Timestamp");

                    b.HasIndex("IsFromAI", "AIProvider")
                        .HasDatabaseName("IX_ChatMessages_AI_Provider");

                    b.HasIndex("SessionId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_Session_Timestamp");

                    b.HasIndex("UserId", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_User_Timestamp");

                    b.HasIndex("SessionId", "IsDeleted", "Timestamp")
                        .HasDatabaseName("IX_ChatMessages_Session_NotDeleted_Timestamp");

                    b.ToTable("ChatMessages", null, t =>
                        {
                            t.HasCheckConstraint("CK_ChatMessages_AITemperature", "[AITemperature] IS NULL OR ([AITemperature] >= 0.0 AND [AITemperature] <= 2.0)");

                            t.HasCheckConstraint("CK_ChatMessages_TokensUsed", "[TokensUsed] IS NULL OR [TokensUsed] > 0");
                        });
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("MessageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ParticipantCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SessionAIModel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SessionAIProvider")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SessionContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("IX_ChatSessions_CreatedByUserId");

                    b.HasIndex("LastActivity")
                        .HasDatabaseName("IX_ChatSessions_LastActivity");

                    b.HasIndex("IsActive", "LastActivity")
                        .HasDatabaseName("IX_ChatSessions_Active_LastActivity");

                    b.HasIndex("CreatedByUserId", "IsActive", "LastActivity")
                        .HasDatabaseName("IX_ChatSessions_User_Active_LastActivity");

                    b.ToTable("ChatSessions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("434ecdd6-0ecf-4e81-a819-4d10161c3222"),
                            CreatedAt = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3906),
                            CreatedByUserId = new Guid("2f1bff77-fc98-410e-b3ec-0cecb5021733"),
                            Description = "Session de test pour développement",
                            IsActive = true,
                            IsPrivate = false,
                            LastActivity = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3907),
                            MessageCount = 0,
                            ParticipantCount = 1,
                            Title = "Session de Test"
                        });
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.SessionParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsModerator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("LastSeenAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MessagesCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("participant");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastSeenAt")
                        .HasDatabaseName("IX_SessionParticipants_LastSeenAt");

                    b.HasIndex("SessionId", "IsActive")
                        .HasDatabaseName("IX_SessionParticipants_Session_Active");

                    b.HasIndex("SessionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_SessionParticipants_Session_User");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_SessionParticipants_User_Active");

                    b.ToTable("SessionParticipants", null, t =>
                        {
                            t.HasCheckConstraint("CK_SessionParticipants_Role", "[Role] IN ('participant', 'moderator', 'admin')");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5a07917-7b79-4f20-8791-b4b723cc6690"),
                            IsActive = true,
                            IsModerator = false,
                            JoinedAt = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3948),
                            LastSeenAt = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3949),
                            MessagesCount = 0,
                            Role = "admin",
                            SessionId = new Guid("434ecdd6-0ecf-4e81-a819-4d10161c3222"),
                            UserId = new Guid("2f1bff77-fc98-410e-b3ec-0cecb5021733")
                        });
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("TotalMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalSessions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LastActivity")
                        .HasDatabaseName("IX_Users_LastActivity");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.HasIndex("IsActive", "LastActivity")
                        .HasDatabaseName("IX_Users_Active_LastActivity");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f1bff77-fc98-410e-b3ec-0cecb5021733"),
                            CreatedAt = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3615),
                            DisplayName = "Test User",
                            IsActive = true,
                            LastActivity = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3616),
                            TotalMessages = 0,
                            TotalSessions = 0,
                            Username = "testuser"
                        });
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EnableNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableSoundEffects")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("fr");

                    b.Property<int>("MaxTokens")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1000);

                    b.Property<string>("PreferredAIProvider")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("OpenAI");

                    b.Property<string>("PreferredModel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("ShowTypingIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("SystemPrompt")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Temperature")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("float(3)")
                        .HasDefaultValue(0.69999999999999996);

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("light");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PreferredAIProvider")
                        .HasDatabaseName("IX_UserPreferences_AIProvider");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPreferences_UserId");

                    b.ToTable("UserPreferences", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserPreferences_MaxTokens", "[MaxTokens] >= 1 AND [MaxTokens] <= 4000");

                            t.HasCheckConstraint("CK_UserPreferences_Temperature", "[Temperature] >= 0.0 AND [Temperature] <= 2.0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("0bbd7a42-c05f-43ab-bed0-10f6f440d60b"),
                            EnableNotifications = true,
                            EnableSoundEffects = true,
                            Language = "fr",
                            MaxTokens = 1000,
                            PreferredAIProvider = "OpenAI",
                            ShowTypingIndicator = true,
                            Temperature = 0.69999999999999996,
                            Theme = "light",
                            UpdatedAt = new DateTime(2025, 6, 24, 11, 14, 30, 313, DateTimeKind.Utc).AddTicks(3867),
                            UserId = new Guid("2f1bff77-fc98-410e-b3ec-0cecb5021733")
                        });
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatMessage", b =>
                {
                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.ChatMessage", "ParentMessage")
                        .WithMany("Replies")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.ChatSession", "Session")
                        .WithMany("Messages")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentMessage");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatSession", b =>
                {
                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.User", "CreatedBy")
                        .WithMany("Sessions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.SessionParticipant", b =>
                {
                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.ChatSession", "Session")
                        .WithMany("Participants")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.User", "User")
                        .WithMany("Participations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.UserPreferences", b =>
                {
                    b.HasOne("ChatAI_Assistant.Server.Data.Entities.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("ChatAI_Assistant.Server.Data.Entities.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatMessage", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.ChatSession", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ChatAI_Assistant.Server.Data.Entities.User", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participations");

                    b.Navigation("Preferences");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
